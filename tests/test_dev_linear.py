from collections import defaultdict
import logging
from pprint import pprint
import re
from textwrap import dedent
import yaml

from pyfw.parsing import parse_iptables_save


logger = logging.getLogger(__name__)


sample_iptables_save = dedent('''
    # Generated by iptables-save v1.4.21 on Tue Jan 10 15:48:13 2017
    *nat
    :PREROUTING ACCEPT [4:796]
    :INPUT ACCEPT [0:0]
    :OUTPUT ACCEPT [0:0]
    :POSTROUTING ACCEPT [0:0]
    :DOCKER - [0:0]
    -A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
    -A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
    -A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
    -A POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 80 -j MASQUERADE
    -A DOCKER -i docker0 -j RETURN
    -A DOCKER ! -i docker0 -p tcp -m tcp --dport 80 -j DNAT --to-destination 172.17.0.2:80
    COMMIT
    # Completed on Tue Jan 10 15:48:13 2017
    # Generated by iptables-save v1.4.21 on Tue Jan 10 15:48:13 2017
    *filter
    :INPUT ACCEPT [889:47280]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [957:99168]
    :DOCKER - [0:0]
    :DOCKER-ISOLATION - [0:0]
    -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
    -A INPUT -p tcp -m tcp --dport 443 -m comment --comment https -j ACCEPT
    -A FORWARD -j DOCKER-ISOLATION
    -A FORWARD -o docker0 -j DOCKER
    -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    -A FORWARD -i docker0 ! -o docker0 -j ACCEPT
    -A FORWARD -i docker0 -o docker0 -j ACCEPT
    -A FORWARD -d 192.168.122.0/24 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    -A FORWARD -s 192.168.122.0/24 -i virbr0 -j ACCEPT
    -A FORWARD -i virbr0 -o virbr0 -j ACCEPT
    -A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable
    -A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachable
    -A FORWARD -p tcp -m set --match-set fwd_allowed_dst_ports dst -m set --match-set fwd_allowed_src_hosts src -m comment --comment allow_vm_fwd -j ACCEPT
    -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment allow_established -j ACCEPT
    -A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
    -A DOCKER-ISOLATION -j RETURN
    COMMIT
    # Completed on Tue Jan 10 15:48:13 2017
''')


sample_wishes_yaml = '''
pyfw_wishes:
    iptables:
        FORWARD:
            rules:
            - allow_established: -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment allow_established -j ACCEPT
            - allow_vm_fwd: -o virbr0 -p tcp -m set --match-set fwd_allowed_dst_ports dst -m set --match-set fwd_allowed_src_hosts src -m comment --comment allow_vm_fwd -j ACCEPT
            - reject_vm_fwd: -o virbr0 -p tcp -m set --match-set fwd_allowed_dst_ports dst -m set ! --match-set fwd_allowed_src_hosts src -m conntrack ! --ctstate RELATED,ESTABLISHED -m comment --comment reject_vm_fwd -j REJECT --reject-with icmp-port-unreachable
            - ~match: virbr0|192\.168\.122\.
            - ~match: docker0|DOCKER
'''

sample_wishes = yaml.safe_load(sample_wishes_yaml)['pyfw_wishes']


def test_demo():
    tables = parse_iptables_save(sample_iptables_save)
    chain_state_rules = tables['filter']['FORWARD']['rules']
    chain_rule_wishes = sample_wishes['iptables']['FORWARD']['rules']
    chain_desired_rules = determine_desired_state(chain_state_rules, chain_rule_wishes)
    assert chain_desired_rules == [
        '-m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment allow_established -j ACCEPT',
        '-o virbr0 -p tcp -m set --match-set fwd_allowed_dst_ports dst -m set --match-set fwd_allowed_src_hosts src -m comment --comment allow_vm_fwd -j ACCEPT',
        '-o virbr0 -p tcp -m set --match-set fwd_allowed_dst_ports dst -m set ! --match-set fwd_allowed_src_hosts src -m conntrack ! --ctstate RELATED,ESTABLISHED -m comment --comment reject_vm_fwd -j REJECT --reject-with icmp-port-unreachable',
        '-d 192.168.122.0/24 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT',
        '-s 192.168.122.0/24 -i virbr0 -j ACCEPT',
        '-i virbr0 -o virbr0 -j ACCEPT',
        '-o virbr0 -j REJECT --reject-with icmp-port-unreachable',
        '-i virbr0 -j REJECT --reject-with icmp-port-unreachable',
        '-j DOCKER-ISOLATION',
        '-o docker0 -j DOCKER',
        '-o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT',
        '-i docker0 ! -o docker0 -j ACCEPT',
        '-i docker0 -o docker0 -j ACCEPT',
    ]
    commands = determine_commands('filter', 'FORWARD', chain_state_rules, chain_desired_rules)
    pprint(commands, width=300)
    assert commands == [
        'iptables -w -t filter -I FORWARD 1 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment _pyfw_temp_allow_established -j ACCEPT',
        'iptables -w -t filter -D FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment allow_established -j ACCEPT',
        'iptables -w -t filter -I FORWARD 1 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment allow_established -j ACCEPT',
        'iptables -w -t filter -D FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment _pyfw_temp_allow_established -j ACCEPT',
        '',
        'iptables -w -t filter -I FORWARD 2 -o virbr0 -p tcp -m set --match-set fwd_allowed_dst_ports dst -m set --match-set fwd_allowed_src_hosts src -m comment --comment allow_vm_fwd -j ACCEPT',
        'iptables -w -t filter -I FORWARD 3 -o virbr0 -p tcp -m set --match-set fwd_allowed_dst_ports dst -m set ! --match-set fwd_allowed_src_hosts src -m conntrack ! --ctstate RELATED,ESTABLISHED -m comment --comment reject_vm_fwd -j REJECT --reject-with icmp-port-unreachable',
        '',
        'iptables -w -t filter -I FORWARD 4 -m comment --comment _pyfw_temp_ -d 192.168.122.0/24 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT',
        'iptables -w -t filter -D FORWARD -d 192.168.122.0/24 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT',
        'iptables -w -t filter -I FORWARD 4 -d 192.168.122.0/24 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT',
        'iptables -w -t filter -D FORWARD -m comment --comment _pyfw_temp_ -d 192.168.122.0/24 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT',
        '',
        'iptables -w -t filter -I FORWARD 5 -m comment --comment _pyfw_temp_ -s 192.168.122.0/24 -i virbr0 -j ACCEPT',
        'iptables -w -t filter -D FORWARD -s 192.168.122.0/24 -i virbr0 -j ACCEPT',
        'iptables -w -t filter -I FORWARD 5 -s 192.168.122.0/24 -i virbr0 -j ACCEPT',
        'iptables -w -t filter -D FORWARD -m comment --comment _pyfw_temp_ -s 192.168.122.0/24 -i virbr0 -j ACCEPT',
        '',
        'iptables -w -t filter -I FORWARD 6 -m comment --comment _pyfw_temp_ -i virbr0 -o virbr0 -j ACCEPT',
        'iptables -w -t filter -D FORWARD -i virbr0 -o virbr0 -j ACCEPT',
        'iptables -w -t filter -I FORWARD 6 -i virbr0 -o virbr0 -j ACCEPT',
        'iptables -w -t filter -D FORWARD -m comment --comment _pyfw_temp_ -i virbr0 -o virbr0 -j ACCEPT',
        '',
        'iptables -w -t filter -I FORWARD 7 -m comment --comment _pyfw_temp_ -o virbr0 -j REJECT --reject-with icmp-port-unreachable',
        'iptables -w -t filter -D FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable',
        'iptables -w -t filter -I FORWARD 7 -o virbr0 -j REJECT --reject-with icmp-port-unreachable',
        'iptables -w -t filter -D FORWARD -m comment --comment _pyfw_temp_ -o virbr0 -j REJECT --reject-with icmp-port-unreachable',
        '',
        'iptables -w -t filter -I FORWARD 8 -m comment --comment _pyfw_temp_ -i virbr0 -j REJECT --reject-with icmp-port-unreachable',
        'iptables -w -t filter -D FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachable',
        'iptables -w -t filter -I FORWARD 8 -i virbr0 -j REJECT --reject-with icmp-port-unreachable',
        'iptables -w -t filter -D FORWARD -m comment --comment _pyfw_temp_ -i virbr0 -j REJECT --reject-with icmp-port-unreachable',
        '',
        'iptables -w -t filter -D FORWARD -p tcp -m set --match-set fwd_allowed_dst_ports dst -m set --match-set fwd_allowed_src_hosts src -m comment --comment allow_vm_fwd -j ACCEPT',
    ]


def determine_desired_state(rules, wishes):
    desired_rules = []

    rules_by_comment = defaultdict(list) # str -> [str]
    for rule in rules:
        m = re.search(r'(?:^| )-m comment --comment (?P<comment>[a-zA-z0-9_-]+)(?: |$)', rule)
        if m:
            comment = m.group('comment')
            rules_by_comment[comment].append(rule)

    remaining_rules = list(rules)

    for wish in wishes:
        if isinstance(wish, dict):
            (w_key, w_value), = wish.items()
            assert isinstance(w_key, str)
            if w_key.startswith('~'):
                if w_key == '~match':
                    assert isinstance(w_value, str)
                    matched_rules = [rule for rule in remaining_rules if re.search(w_value, rule)]
                    desired_rules.extend(matched_rules)
                    for rule in matched_rules:
                        remaining_rules.remove(rule)
                else:
                    raise Exception('Key starts with "~" but is not "~match"')
            else:
                assert isinstance(w_value, str)
                desired_rules.append(w_value)
                for rule in rules_by_comment[w_key]:
                    remaining_rules.remove(rule)
        else:
            raise Exception('Expected to be dict: {!r}'.format(wish))

    desired_rules.extend(remaining_rules)
    return desired_rules


def determine_commands(table_name, chain_name, current_rules, target_rules):
    pprint(current_rules, width=250)
    print()
    pprint(target_rules, width=250)
    print()

    target_rules = [rule for rule in target_rules if '--comment _pyfw_temp_' not in rule]

    commands = []

    def add_command(op, *args):
        commands.append('iptables -w -t {table} {op} {chain} {args}'.format(
            table=table_name, chain=chain_name,
            op=op, args=' '.join(str(s) for s in args)))

    wip_rules = list(current_rules)

    for pos, rule in enumerate(target_rules):
        if pos >= len(wip_rules):
            add_command('-A', rule)
            wip_rules.append(rule)
            continue

        if rule == wip_rules[pos]:
            continue

        if rule in wip_rules:
            temp_rule = make_temp_rule(rule)
            if commands and commands[-1] != '':
                commands.append('')

            add_command('-I', pos + 1, temp_rule)
            wip_rules.insert(pos, temp_rule)

            for i in range(wip_rules.count(rule)):
                add_command('-D', rule)
                wip_rules.remove(rule)

            add_command('-I', pos + 1, rule)
            wip_rules.insert(pos, rule)

            for i in range(wip_rules.count(temp_rule)):
                add_command('-D', temp_rule)
                wip_rules.remove(temp_rule)

            commands.append('')

        else:
            add_command('-I', pos + 1, rule)
            wip_rules.insert(pos, rule)

    for rule in wip_rules:
        if rule not in target_rules:
            add_command('-D', rule)
            wip_rules.remove(rule)

    while commands and commands[-1] == '':
        commands.pop()

    assert wip_rules == target_rules
    return commands


def make_temp_rule(rule):
    temp_rule = rule.replace('-m comment --comment ', '-m comment --comment _pyfw_temp_')
    if temp_rule == rule:
        temp_rule = '-m comment --comment _pyfw_temp_ ' + rule
    assert temp_rule != rule
    return temp_rule
